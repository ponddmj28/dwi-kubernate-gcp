package th.co.acc.dwi.conf;


import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepScope;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.item.adapter.ItemReaderAdapter;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.FileSystemResource;

import th.co.acc.dwi.service.adapter.WorkOrderServiceAdapter;

@EnableBatchProcessing
@Configuration
public class BatchConfiguration {
	@Autowired
	private JobBuilderFactory jobs;
	
	@Autowired
	private StepBuilderFactory step;
	
	@Autowired
	private WorkOrderServiceAdapter workOrderAdapter;
	
	@Bean
	public ItemReaderAdapter<Object> serviceItemReader() {
		ItemReaderAdapter<Object> reader = new ItemReaderAdapter<Object>();
		reader.setTargetObject(workOrderAdapter);
		reader.setTargetMethod("nextProduct");
		return reader;
	}
	
	@Bean
	   public Job workOrderJob(){
	        return jobs.get("workOrderJob")
	        		.incrementer(new RunIdIncrementer())
	                .start(workOrderStep())
	                .build();
	   }
	
	@Bean
	public Step workOrderStep() {
		return step.get("workOrderStep")
				.chunk(10)
				.reader(reader())
				.processor(processor())
				.writer(writer())
				.build();
	}
	
	@Bean
	@StepScope
	public FlatFileItemReader<Product> flatFileItemReader(
			@Value("#{jobParameters['fileInput']}")
			FileSystemResource inputFile) {
		FlatFileItemReader reader = new FlatFileItemReader();
        reader.setResource(inputFile);
        reader.setLinesToSkip(1);
        reader.setLineMapper(new DefaultLineMapper(){
            {
                setFieldSetMapper(new BeanWrapperFieldSetMapper(){
                    {
                        setTargetType(Product.class);
                    }
                });

                setLineTokenizer(new DelimitedLineTokenizer(){
                    {
                        setNames(new String[]{"productId","prodName","productDesc"  ,"price","unit"});
                        setDelimiter(",");
                    }
                });
            }
        });

        return reader;
	}
//	
//	@Bean
//	@StepScope
//	public FlatFileItemWriter<Object> flatFileItemWriter(
//			@Value("#{jobParameters['fileOutput']}")
//			FileSystemResource output
//			){
//		FlatFileItemWriter writer = new FlatFileItemWriter();
//
//        writer.setResource(output);
//        writer.setLineAggregator( new DelimitedLineAggregator(){
//            {
//                setDelimiter("|");
//                setFieldExtractor(new BeanWrapperFieldExtractor(){
//                    {
//                        setNames(new String[]{"productId","prodName","productDesc","price","unit" });
//                    }
//                });
//            }
//        });
//
//        // how to write the header
//        writer.setHeaderCallback(new FlatFileHeaderCallback() {
//            @Override
//            public void writeHeader(Writer writer) throws IOException {
//                writer.write("productID,productName,ProductDesc,price,unit");
//            }
//        });
//
//        writer.setAppendAllowed(false);
//
//        writer.setFooterCallback(new FlatFileFooterCallback() {
//            @Override
//            public void writeFooter(Writer writer) throws IOException {
//                writer.write(" The file is created at " + new SimpleDateFormat().format(new Date()));
//            }
//        });
//        return writer;
//	}
}
