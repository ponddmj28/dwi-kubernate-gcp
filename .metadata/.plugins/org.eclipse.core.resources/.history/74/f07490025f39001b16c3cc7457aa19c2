package th.co.acc.dwi.conf;


import java.io.IOException;
import java.io.Writer;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepScope;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.item.adapter.ItemReaderAdapter;
import org.springframework.batch.item.file.FlatFileFooterCallback;
import org.springframework.batch.item.file.FlatFileHeaderCallback;
import org.springframework.batch.item.file.FlatFileItemWriter;
import org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor;
import org.springframework.batch.item.file.transform.DelimitedLineAggregator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.FileSystemResource;

import th.co.acc.dwi.service.adapter.WorkOrderServiceAdapter;

@EnableBatchProcessing
@Configuration
public class BatchConfiguration {
	@Autowired
	private JobBuilderFactory jobs;
	
	@Autowired
	private StepBuilderFactory step;
	
	@Autowired
	private WorkOrderServiceAdapter workOrderAdapter;
	
	@Bean
	public ItemReaderAdapter<Object> serviceItemReader() {
		ItemReaderAdapter<Object> reader = new ItemReaderAdapter<Object>();
		reader.setTargetObject(workOrderAdapter);
		reader.setTargetMethod("nextProduct");
		return reader;
	}
	
	@Bean
	   public Job workOrderJobCsv(){
	        return jobs.get("workOrderJob")
	        		.incrementer(new RunIdIncrementer())
	                .start(workOrderStepCsv())
	                .build();
	   }
	
	@Bean
	public Step workOrderStepCsv() {
		return step.get("workOrderStep")
				.chunk(10)
				.reader(serviceItemReader())
				.writer(flatFileItemWriter(null))
				.build();
	}
	
	@Bean
	@StepScope
	public FlatFileItemWriter<Object> flatFileItemWriter(
			@Value("#{jobParameters['fileOutput']}")
			FileSystemResource output
			){
		FlatFileItemWriter writer = new FlatFileItemWriter();

        writer.setResource(output);
        writer.setLineAggregator( new DelimitedLineAggregator(){
            {
                setDelimiter("|");
                setFieldExtractor(new BeanWrapperFieldExtractor(){
                    {
                        setNames(new String[]{"productId","prodName","productDesc","price","unit" });
                    }
                });
            }
        });

        // how to write the header
        writer.setHeaderCallback(new FlatFileHeaderCallback() {
            @Override
            public void writeHeader(Writer writer) throws IOException {
                writer.write("productID,productName,ProductDesc,price,unit");
            }
        });

        writer.setAppendAllowed(false);

        writer.setFooterCallback(new FlatFileFooterCallback() {
            @Override
            public void writeFooter(Writer writer) throws IOException {
                writer.write(" The file is created at " + new SimpleDateFormat().format(new Date()));
            }
        });
        return writer;
	}
	
//	@Bean
//	@StepScope
//	public StaxEventItemWriter<Product> staxEventItemWriter(
//			@Value("#{jobParameters['fileOutput']}")
//				FileSystemResource output){
//		XStreamMarshaller marshaller = new XStreamMarshaller();
//		Map<String,Class> aliases = new HashMap<String,Class>();
//		aliases.put("product", Product.class);
//		marshaller.setAliases(aliases);
//		marshaller.setAutodetectAnnotations(true);
//		StaxEventItemWriter writer = new StaxEventItemWriter();
//		writer.setMarshaller(marshaller);
//		writer.setResource(output);
//		writer.setRootTagName("Products");
//		return writer;
//	}
}
